# ---------------------------------------------------------------------------
# extract_basin_gSSURGO_data.py
# Created on: 2014-07-26 (generated by ArcGIS/ModelBuilder)
# Description: extract gSSURGO gridded soil data using basin shapefiles and write
# a land cover count summary to csv file
# NOTE: only runs one SSURGO raster (usually 1 file for each state) -> requires
# multiple runs for basins in more than one state
# ---------------------------------------------------------------------------

################### User Input #####################
###################################################
RFC = 'LMRFC'
basins_folder = r'P:\NWS\GIS\LMRFC\Shapefiles\basins_calib'

# if you only want to run specific basins -> list them below
# otherwise set it equal to empty list (basins_overwrite = [] or basins_overwrite = ['COCF1'])
basins_overwrite = ['DOET1'] 

# location of the state raster SSURGO data
State_gSSURGO_Raster = r'Q:\GISLibrary\SSURGO\TN\soils\gssurgo_g_tn.gdb\MapunitRaster_TN_10m'

# Output directory for the basin .csv summary files
output_dir = 'P:\\NWS\\GIS\\' + RFC + '\\SSURGO\\gSSURGO\\'  # this must contain a folder for each basin (eg. FONN7)
######################################################
################# End User Input ######################

# Import arcpy module
import arcpy
import os
import csv
arcpy.env.overwriteOutput = True

# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")

# Set Geoprocessing environments
arcpy.env.outputCoordinateSystem = "PROJCS['USA_Contiguous_Albers_Equal_Area_Conic_USGS_version',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Albers'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-96.0],PARAMETER['Standard_Parallel_1',29.5],PARAMETER['Standard_Parallel_2',45.5],PARAMETER['Latitude_Of_Origin',23.0],UNIT['Meter',1.0]]"
arcpy.env.parallelProcessingFactor = "50%"
print 'ok so far...'

#################################################################################
# find all basins in RFC or only run the specified basin list
basin_files = os.listdir(basins_folder) # list all basin shapefiles in the above specified directory
if len(basins_overwrite) != 0:
    basin_files = basins_overwrite      # use the basins_overright variable to run only specified basins instead of all RFC basins
basins = []
check_dir = os.listdir(output_dir)      # list all folders in output_dir
for each in basin_files:
    if each[:5] not in basins:
        basins.append(each[:5])

print 'Identified ' + str(len(basins)) + ' basins in ' + RFC + ' input directory...'        

# loop through basins
for basin in basins:
    ## Script arguments
    Basin_Boundary = basins_folder + '\\' + basin + '.shp'
    print basin 
    
    ## Local variables:
    Basin_Raster = 'P:\\NWS\\GIS\\Models\\10_0_tools\\Model_Output\\' + basin + '_soil'
    #Basin_Points = 'P:\\NWS\\GIS\\Models\\10_0_tools\\Model_Output\\' + basin + '_pts'
    dummy = 'P:\\NWS\\GIS\\Models\\10_0_tools\\Model_Output\\' 
    
    # Process: Extract by Mask
    print 'Clipping raster with basin polygon...'
    arcpy.gp.ExtractByMask_sa(State_gSSURGO_Raster, Basin_Boundary, Basin_Raster)
    #arcpy.Clip_management(State_gSSURGO_Raster, "#", Basin_Raster, Basin_Boundary, "0", "ClippingGeometry")
    
    # Process: Build Raster Attribute Table
    print 'Building basin raster SSURGO attribute table...'
    #arcpy.BuildRasterAttributeTable_management(Basin_Raster, "Overwrite")
    arcpy.TableToTable_conversion(State_gSSURGO_Raster, dummy, 'state_gSSURGO_table.dbf')

    # Process: Join Field
    print 'Joining field with land cover name...'
    arcpy.JoinField_management(Basin_Raster, "MUKEY", dummy + 'state_gSSURGO_table.dbf', "hydgrpdcd", "")
    
    # Process: Table to Table
    print 'Converting to .dbf table...'
    arcpy.TableToTable_conversion(Basin_Raster, dummy, basin + '_gSSURGO.dbf')#, "", "Value \"Value\" false false false 4 Long 0 0 ,First,#,P:\\NWS\\GIS\\Models\\Model_Output.gdb\\Extract_img1\\Band_1,Value,-1,-1;Count \"Count\" false false false 8 Double 0 0 ,First,#,P:\\NWS\\GIS\\Models\\Model_Output.gdb\\Extract_img1\\Band_1,Count,-1,-1;Land_Cover \"Land_Cover\" true false false 254 Text 0 0 ,First,#,P:\\NWS\\GIS\\Models\\Model_Output.gdb\\Extract_img1\\Band_1,Land_Cover,-1,-1", "")
    
    # Process: output csv file
    print 'Creating '+ basin + '_gSSURGO.csv file...'
    rows = arcpy.SearchCursor(dummy + basin + '_gSSURGO.dbf')
    nlcd_csv = open(output_dir + basin + '_gSSURGO.csv', 'wb')
    csvFile = csv.writer(nlcd_csv) #output csv
    fieldnames = [f.name for f in arcpy.ListFields(dummy + basin + '_gSSURGO.dbf')]

    allRows = []
    for row in rows:
        rowlist = []
        for field in fieldnames:
            rowlist.append(row.getValue(field))
        allRows.append(rowlist)
        
    csvFile.writerow(fieldnames)
    for row in allRows:
        csvFile.writerow(row)
    row = None
    rows = None
    nlcd_csv.close()
    
print 'Script completed!!'

'''
Output_Excel_Sheet = arcpy.GetParameterAsText(2)
if Output_Excel_Sheet == '#' or not Output_Excel_Sheet:
    Output_Excel_Sheet = "P:\\NWS\\GIS\\MBRFC\\SSURGO\\data_files\\%Value%_ssurgo.xls" # provide a default value if unspecified

# Local variables:
Basin_gSSURGO_Raster = State_gSSURGO_Raster
Joined_Raster = Basin_gSSURGO_Raster
v_Value__gssurgo = Joined_Raster
Model_Output_gdb = "P:\\NWS\\GIS\\Models\\Model_Output.gdb"
Basin_Boundary__shp_File = Folder_with_Basin__shp_Files
Value = Basin_Boundary__shp_File
Name = Folder_with_Basin__shp_Files

# Process: Iterate Feature Classes
arcpy.IterateFeatureClasses_mb(Folder_with_Basin__shp_Files, "", "POLYGON", "NOT_RECURSIVE")

# Process: Parse Path
arcpy.ParsePath_mb(Basin_Boundary__shp_File, "NAME")

# Process: Extract by Mask
arcpy.gp.ExtractByMask_sa(State_gSSURGO_Raster, Basin_Boundary__shp_File, Basin_gSSURGO_Raster)

# Process: Join Field
arcpy.JoinField_management(Basin_gSSURGO_Raster, "MUKEY", State_gSSURGO_Raster, "hydgrpdcd", "")

# Process: Table to Table
arcpy.TableToTable_conversion(Joined_Raster, Model_Output_gdb, "%Value%_gssurgo", "", "VALUE \"VALUE\" false true true 0 Long 0 0 ,First,#,,VALUE,-1,-1,,Value,-1,-1;COUNT \"COUNT\" false true true 0 Long 0 0 ,First,#,,COUNT,-1,-1,,Count,-1,-1;MUKEY \"MUKEY\" true true false 30 Text 0 0 ,First,#,,MUKEY,-1,-1;hydgrpdcd \"Hydrologic Group - Dominant Conditions\" true true false 254 Text 0 0 ,First,#,,hydgrpdcd,-1,-1", "")

# Process: Table To Excel
arcpy.TableToExcel_conversion(v_Value__gssurgo, Output_Excel_Sheet, "NAME", "CODE")
'''
