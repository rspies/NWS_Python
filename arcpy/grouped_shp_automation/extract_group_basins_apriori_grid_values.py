# ---------------------------------------------------------------------------
# extract_basin_apriori_grid_values.py
# Created on: 2014-07-22 09:01:13.00000 (generated by ArcGIS/ModelBuilder)
# Usage: extract basin apriori grid values for all basins in a input RFC 
# Created by: Ryan Spies (Cody Moser arcgis tool)
# ---------------------------------------------------------------------------
# Import arcpy module
import arcpy
import numpy
import csv
import os
import glob
import winsound
arcpy.env.overwriteOutput = True
os.chdir("../../../GIS/")
maindir = os.getcwd()

################### User Input #####################
RFC = 'NWRFC_FY2017'
fx_group = '' # leave blank if not processing by fx group
#in_shp = maindir + '\\' + RFC[:5] + os.sep + RFC + '\\Shapefiles_from' + RFC[:5] + '\\calb_basins\\calb_basins_DES.shp'
in_shp = maindir + '\\' + RFC[:5] + os.sep + RFC + '\\Shapefiles_fromRFC\\calb_basins\\FY2017_CalibrationTask_BasinElevZones_30m.shp'
find_ch5id = 'BASIN' # CH5_ID OR NAME attribute table header for basin id -> must exist!!!
#find_name = 'NAME' # optional: attribute table header for more basin info
snow = 'on' # choices: 'on' or 'off' -> process the snow grids (alat,elev,mfmax,mfmin,uadj)

# location of apriori grids (CONUS)
SACSMA_Grids_Folder = 'D:\\Projects\\NWS\\GIS\\APriori\\SACSMA_grids\\ssurgo\\grid_WGS84'
SNOW17_Grids_Folder = 'D:\\Projects\\NWS\\GIS\\APriori\\SNOW17_grids\\grid_WGS84'

# if you only want to run specific basins -> list them below
# otherwise set it equal to empty list (basins_overwrite = [])
#basins_overwrite = []#['FRNO3','GOSO3','HARO3','HCRO3','JASO3','LOPO3','MNRO3','SPRO3','TRBO3','VIDO3'] 

if fx_group != '':
    output_dir =  maindir + '\\' + RFC[:5] + os.sep + RFC + '\\Apriori\\' + fx_group +os.sep
else:
    output_dir =  maindir + '\\' + RFC[:5] + os.sep + RFC + '\\Apriori\\'

ignore_basins = ['PLBT4']
################# End User Input ######################
if not os.path.exists('C:\\NWS\\python\\temp_output\\'):
    print "Missing directory: 'C:\\NWS\\python\\temp_output\\' -> please create"
    raw_input("Press enter to continue processing...")
if not os.path.exists(output_dir):
    print "Missing directory: " + output_dir + " -> please create"
    raw_input("Press enter to continue processing...")
print 'Processing...'

# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")
arcpy.env.overwriteOutput = True

#Process: Define Projection
sr = arcpy.SpatialReference(4269) # define projection of basin shp -> 4269 = GCS_North_American_1983
check_project = in_shp[:-4] + '.prj'
if not os.path.exists(check_project):
    print 'Defining Projection...'
    arcpy.DefineProjection_management(in_shp, sr)
print 'setup ok so far...'
       
basins = []
# loop through basins
with arcpy.da.SearchCursor(in_shp, ("SHAPE@",find_ch5id)) as cursor: # search cursor gets "A geometry object for the feature" and the "NAME" attribute for each basin
    for index, row in enumerate(cursor): 
        Basin_Boundary = row[0] # basin geometry
        ch5id = row[1] # basin = find_ch5id
        if ch5id not in ignore_basins:
            print 'Processing basin: ' + str(ch5id)
            print 'ch5id = ' + row[1]
            if not os.path.exists(output_dir + os.sep + ch5id):
                os.makedirs(output_dir + os.sep + ch5id)
                print 'Created dirctory for basin: ' + ch5id
            basins.append(ch5id)
            
            # list all SACSMA SSURGO grids (directories containing data only) #ignore extra files in directory
            all_ssurgo = [ name for name in os.listdir(SACSMA_Grids_Folder) if os.path.isdir(os.path.join(SACSMA_Grids_Folder, name)) ]    
            all_ssurgo.remove('info') # remove info directory from list of variables 
            for variable in all_ssurgo:
                print ch5id + ' --> ' + variable
                Out_text = output_dir + '\\' + ch5id + '\\' + ch5id + '_' + variable + '.txt' 
        
                ## Local variables:
                RASTER = SACSMA_Grids_Folder + '\\' + variable
                #Basin_Raster = 'P:\\NWS\\GIS\\Models\\10_0_tools\\Model_Output\\' + variable
                #Basin_Points = 'P:\\NWS\\GIS\\Models\\10_0_tools\\Model_Output\\' + variable + '_points'
                Basin_Raster = 'C:\\NWS\\python\\temp_output\\' + ch5id
                Basin_Points = 'C:\\NWS\\python\\temp_output\\' + ch5id + '_points'
        
                ## Process: Extract by Mask
                print 'Extracting by mask...'
                arcpy.gp.ExtractByMask_sa(RASTER, Basin_Boundary, Basin_Raster)
        
                ## Process: Raster to Point
                print 'Raster to point...'
                arcpy.RasterToPoint_conversion(Basin_Raster, Basin_Points, "VALUE")
                #
                ## Process: Export Feature Attribute to ASCII
                print 'Export attributes to text...'
                arcpy.ExportXYv_stats(Basin_Points + '.shp', "GRID_CODE", "COMMA", Out_text, "ADD_FIELD_NAMES")
                
            if snow == 'on':
                # list all Snow17 grids (directories containing data only) #ignore extra files in directory
                all_snow = [ name for name in os.listdir(SNOW17_Grids_Folder) if os.path.isdir(os.path.join(SNOW17_Grids_Folder, name)) ]    
                all_snow.remove('info') # remove info directory from list of variables 
                for variable in all_snow:
                    print ch5id + ' --> ' + variable
                    Out_text = output_dir + '\\' + ch5id + '\\' + ch5id + '_' + variable + '.txt' 
            
                    ## Local variables:
                    RASTER = SNOW17_Grids_Folder + '\\' + variable
                    #Basin_Raster = 'P:\\NWS\\GIS\\Models\\10_0_tools\\Model_Output\\' + variable
                    #Basin_Points = 'P:\\NWS\\GIS\\Models\\10_0_tools\\Model_Output\\' + variable + '_points'
                    Basin_Raster = 'C:\\NWS\\python\\temp_output\\x' + ch5id
                    Basin_Points = 'C:\\NWS\\python\\temp_output\\' + ch5id + '_points'
            
                    ## Process: Extract by Mask
                    print 'Extracting by mask...'
                    arcpy.gp.ExtractByMask_sa(RASTER, Basin_Boundary, Basin_Raster)
            
                    ## Process: Raster to Point
                    print 'Raster to point...'
                    arcpy.RasterToPoint_conversion(Basin_Raster, Basin_Points, "VALUE")
                    #
                    ## Process: Export Feature Attribute to ASCII
                    print 'Export attributes to text...'
                    arcpy.ExportXYv_stats(Basin_Points + '.shp', "GRID_CODE", "COMMA", Out_text, "ADD_FIELD_NAMES")

print 'Completed grid extraction!'

print 'Merging all basin apriori data into single csv file...'
for Basin in basins:
    print Basin
    folderPath = output_dir+ Basin + '\\'
    apriori_file = open(folderPath + Basin + '_apriori_parameters.csv', 'w')
    apriori_file.write('Parameter,' + 'Mean,' + 'Max,' + 'Min,' + '\n')
    
    #SAC-SMA SECTION--------------------------------------------------------------
    #loop through SACSMA files in folderPath
    for filename in glob.glob(os.path.join(folderPath, "*.txt")):
        #print filename
    
        #Define output file name
        name = str(os.path.basename(filename)[:])
        name = name.replace('.txt', '')
        #print name
    
        txt_file = open(filename, 'r')
    
        #csv_file = open(r'P:\\NWS\\GIS\\NERFC\\APriori\\temp.csv', 'w')
        csv_file = open(folderPath + 'temp.csv', 'w')
    
        #csv_file.write('BASIN, MEAN, MIN, MAX,' + '\n')
        
        grid = []
        
        for line in txt_file:
            #print line
            csv_file.write(line)
    
        csv_file.close()
        txt_file.close()
    
        csv_file = open(folderPath + 'temp.csv')
        
        data_file = csv.reader(csv_file, delimiter = ',')
        data_file.next()
    
        grid = []
        
        for row in data_file:
            grid_code = float(row[2])
            grid.append(grid_code)
    
        maximum = numpy.max(grid)
        minimum = numpy.min(grid)
        mean = numpy.mean(grid)
    
        #print 'grid is', grid
        #print 'max is', maximum
        #print 'min is', minimum
        #print 'mean is', mean
    
        apriori_file.write(name + ',' + str(mean) + ',' + str(maximum) + ',' + str(minimum) + ',' + '\n')
    
    apriori_file.close()
    
    csv_file.close()
    os.remove(folderPath + 'temp.csv')
    
    print 'A priori parameters in', apriori_file

print 'Script Completed'
winsound.Beep(800,1000) # beep to indicate script is complete
